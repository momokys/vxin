@use "sass:map";
@use "sass:math";
@use "common/config" as *;
@use "common/var" as *;
@use "common/fun" as *;
@use "common/mixins" as *;

@include b(button) {
  @include map-css-var(button, $button);
}

@include b(button) {
  position: relative;
  display: inline-flex;
  justify-content: center;
  align-items: center;
  line-height: 1;
  vertical-align: middle;
  outline: none;
  border: 1px solid transparent;
  border-radius: cssVar(border-radius);
  color: cssVar(button-default-text-color);
  background-color: cssVar(button-default-bg-color);
  white-space: nowrap;
  transition: all .3s cssVar(bezier);
  cursor: pointer;
  -webkit-tap-highlight-color: transparent;

  &:hover,
  &:focus {
    background-color: cssVar(button-default-hover-bg-color);
  }
  &:active {
    background-color: cssVar(button-default-active-bg-color);
  }
  &>span {
    display: inline-flex;
    justify-content: center;
    align-items: center;
  }
  &>i + span {
    margin-left: cssVar(button-icon-margin);
  }
  &>span>i {
    margin-left: cssVar(button-icon-margin);
  }

  &~& {
    margin: cssVar(button-margin);
  }

  @include m(outline) {
    color: cssVar(color-primary-5);
    border-color: cssVar(color-primary-5);
    background-color: transparent;

    &:hover:not(.is-disabled),
    &:focus:not(.is-disabled) {
      color: cssVar(color-primary-4);
      border-color: cssVar(color-primary-4);
      background-color: transparent;
    }
    &:active:not(.is-disabled) {
      color: cssVar(color-primary-6);
      border-color: cssVar(color-primary-6);
      background-color: transparent;
    }
  }
  @include m(text) {
    color: cssVar(color-primary-5);
    border-color: transparent;
    background-color: transparent;
    &:hover:not(.is-disabled),
    &:focus:not(.is-disabled) {
      color: cssVar(color-primary-3);
    }
    &:active:not(.is-disabled) {
      color: cssVar(color-primary-6);
    }
  }
  @include m(link) {
    color: cssVar(color-primary-5);
    border-color: transparent;
    background-color: transparent;
    &:hover:not(.is-disabled),
    &:focus:not(.is-disabled) {
      color: cssVar(color-primary-3);
      text-decoration: underline;
    }
    &:active(.is-disabled) {
      color: cssVar(color-primary-6);
      text-decoration: underline;
    }
  }

  @include is(disabled) {
    opacity: cssVar(disabled-opacity);
    cursor: not-allowed;
  }

  @include is(loading) {
    cursor: wait;
    &>i {
      animation: rotating 2s linear infinite;
    }
  }

  @each $status in (primary, success, warning, danger) {
    @include m($status) {
      color: #ffffff;
      border-color: cssVar(color, $status, 5);
      background-color: cssVar(color, $status, 5);

      &:hover:not(.is-disabled),
      &:focus:not(.is-disabled) {
        border-color: cssVar(color, $status, 4);
        background-color: cssVar(color, $status, 4);
      }
      &:active:not(.is-disabled) {
        border-color: cssVar(color, $status, 6);
        background-color: cssVar(color, $status, 6);
      }

      @include m(outline) {
        color: cssVar(color, $status, 5);
        background-color: transparent;

        &:hover:not(.is-disabled),
        &:focus:not(.is-disabled) {
          color: cssVar(color, $status, 3);
          border-color: cssVar(color, $status, 3);
          background-color: transparent;
        }
        &:active:not(.is-disabled) {
          color: cssVar(color, $status, 6);
          border-color: cssVar(color, $status, 6);
          background-color: transparent;
        }
      }

      @include m(text) {
        color: cssVar(color, $status, 5);
        border-color: transparent;
        background-color: transparent;
        &:hover:not(.is-disabled),
        &:focus:not(.is-disabled) {
          color: cssVar(color, $status, 3);
          border-color: transparent;
          background-color: transparent;
        }
        &:active:not(.is-disabled) {
          color: cssVar(color, $status, 6);
          border-color: transparent;
          background-color: transparent;
        }
      }

      @include m(link) {
        color: cssVar(color, $status, 5);
        border-color: transparent;
        background-color: transparent;
        &:hover:not(.is-disabled),
        &:focus:not(.is-disabled) {
          text-decoration: underline;
          border-color: transparent;
          background-color: transparent;
        }
      }
    }
  }

  @each $size in (large, medium, small, mini) {
    @include m($size) {
      height: cssVar(size, $size);
      padding: 0 cssVar(padding, $size);
      font-size: cssVar(font-size, $size);

      @include m(round) {
        border-radius: cssVar(size, $size);
      }

      @include m(circle) {
        padding: 0;
        width: cssVar(size, $size);
        border-radius: 50%;
      }
    }
  }
}

@keyframes rotating {
  0% {
    transform: rotateZ(0deg);
  }
  100% {
    transform: rotateZ(360deg);
  }
}
