@use "sass:math";
@use "sass:map";
@use "config" as *;
@use "var" as *;
@use "fun" as *;


// BEM

$B: '';

@mixin b($block, $suffix: '') {
  $B: $namespace + '-' + $block !global;

  @if ($suffix == '') {
    .#{$B} {
      @content;
    }
  } @else {
    .#{$B + '-' + $suffix} {
      @content;
    }
  }
}

@mixin e($element) {
  $E: $B + $element-separator + $element !global;

  @at-root {
    & {
      .#{$E} {
        @content;
      }
    }
  }
}

@mixin m($modifier) {
  @at-root {
    &.#{$B + $modifier-separator + $modifier} {
      @content;
    }
  }
}

@mixin is($state) {
  $cls: '';
  @if(str-index($state, ':') == 1) {
    $cls: & + $state;
  } @else {
    $cls: & + '.' + $state-prefix + $state;
  }
  @at-root {
    #{$cls} {
      @content;
    }
  }
}
@mixin is-not($state) {
  $cls: '';
  @if(str-index($state, ':') == 1) {
    $cls: & + ':not('+ $state + ')';
  } @else {
    $cls: & + ':not('+ '.' + $state-prefix + $state + ')';
  }
  @at-root {
    #{$cls} {
      @content;
    }
  }
}

@mixin is-and($states...) {
  $state: '';
  @for $index from 1 through length($states) {
    @if(str-index(nth($states, $index), ':') == 1) {
      $state: $state + nth($states, $index);
    } @else {
      $state: $state + '.' + $state-prefix + nth($states, $index);
    }
  }
  @at-root {
    &#{$state} {
      @content;
    }
  }
}

@mixin is-or($states...) {
  $cls: '';
  @for $index from 1 through length($states) {
    $item: '';
    @if(str-index(nth($states, $index), ':') == 1) {
      $item: & + nth($states, $index);
    } @else {
      $item: & + '.' + $state-prefix + nth($states, $index);
    }
    @if($index == 1) {
      $cls: $item;
    } @else {
      $cls: $cls + ',' + $item;
    }
    @at-root {
      #{$cls} {
        @content;
      }
    }
  }
}

@mixin set-css-var($name, $value) {
  #{cssVarName($name)}: $value;
}

@mixin map-css-var($name, $variables) {
  @each $attribute, $value in $variables {
    #{cssVarName($name, $attribute)}: $value;
  }
}

@mixin css-var-from-global($name, $gVar) {
  $varName: cssVarName($name, $gVar);
  $gVarName: cssVarName($gVar);
  #{$varName}: var(#{$gVarName});
}

@mixin css-var-map-global($name, $gVar) {
  $vars: map-get($global, $gVar);
  @each $attribute, $value in $vars {
    $varName: cssVarName($name, $gVar, $attribute);
    $gVarName: cssVarName($gVar, $attribute);
    #{$varName}: var(#{$gVarName});
  }
}

@mixin set-color-var() {
  @each $color in $colorList {
    @include set-css-var(color- + $color, map.get($colors, $color));
    @each $level in (0, 1, 2, 3, 4, 5) {
      @include set-css-var(color- + $color + '-#{$level}', mix(
          #ffffff,
          map.get($colors, $color),
          math.percentage(math.div(5 - $level, 6))
      ));
    }
    @each $level in (6, 7, 8, 9) {
      @include set-css-var(color- + $color + '-#{$level}', mix(
          #000000,
          map.get($colors, $color),
          math.percentage(math.div($level - 5, 6))
      ));
    }
  }
}
